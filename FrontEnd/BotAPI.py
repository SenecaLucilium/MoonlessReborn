import json

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)
from selenium.webdriver.firefox.webdriver import WebDriver
from BackEnd.parser import getArticleByUrl

from BackEnd.logger import Logger
logger = Logger()

class BotAPI ():
    def __init__(self, driver: WebDriver):
        logger.logger.info('BotAPI init.')

        self.driver = driver
        with open('data.json', 'r') as file:
                token = json.load(file)['token']
        self.application = ApplicationBuilder().token(token).build()

        startHandler = CommandHandler ('start', self.start)
        helpHandler = CommandHandler ('help', self.help)
        getHandler = CommandHandler ('get', self.get)
        reportHandler = CommandHandler ('report', self.report)
        credentialsHandler = CommandHandler ('credentials', self.credentials)
        unknownHandler = MessageHandler (filters.COMMAND, self.unknown)

        self.application.add_handler (startHandler)
        self.application.add_handler (helpHandler)
        self.application.add_handler (getHandler)
        self.application.add_handler (reportHandler)
        self.application.add_handler (credentialsHandler)
        self.application.add_handler (unknownHandler)

        logger.logger.info('BotAPI initialized, run polling.')
        self.application.run_polling (allowed_updates=Update.ALL_TYPES)
    
    @staticmethod
    async def unknown (update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            logger.logger.info(f"Got unknown message from user_id: {context._user_id}, with args: {''.join(context.args)}")
            msg = (
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
                "–í—ã–∑–æ–≤–∏—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
            await context.bot.sendMessage (
                chat_id=update.effective_chat.id,
                text=msg
            )
        except Exception as error:
            logger.logger.error(f'Something went wrong at unknown handler with error: {error}')
            await update.effective_message.reply_text ("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
    
    @staticmethod
    async def start (update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            logger.logger.info(f"Got start message from user_id: {context._user_id}, with args: {''.join(context.args)}")
            msg = (
                "–≠—Ç–æ—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–º –º–µ–Ω—å—à–µ –º–µ—Å—è—Ü–∞.\n"
                "\n"
                "–ë–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—å–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞—Ñ–∞—Ö (telegra.ph).\n"
                "\n"
                "‚öôÔ∏è<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                "/get [url] - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ —Å—Å—ã–ª–∫–µ —Å –±—É—Å—Ç–∏\n"
                "/help - –ø–æ–º–æ—â—å –∏ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            )
            await context.bot.sendMessage (
                chat_id=update.effective_chat.id,
                text=msg,
                parse_mode='html'
            )
        except Exception as error:
            logger.logger.error(f'Something went wrong at start handler with error: {error}')
            await update.effective_message.reply_text ("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
    
    @staticmethod
    async def help (update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            logger.logger.info(f"Got help message from user_id: {context._user_id}, with args: {''.join(context.args)}")
            msg = (
                "<b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n"
                "\n"
                "‚öôÔ∏è<b>–ú–µ–Ω—é:</b>\n"
                "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                "/help - –ø–æ–º–æ—â—å –∏ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                "\n"
                "üìö<b>–°—Ç–∞—Ç—å–∏</b>\n"
                "/get [url] - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ —Å—Å—ã–ª–∫–µ —Å –±—É—Å—Ç–∏\n"
                "\n"
                "üì£<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ:</b>\n"
                "/report [message] - —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ\n"
                "/credentials - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ\n"
            )
            await context.bot.sendMessage (
                chat_id=update.effective_chat.id,
                text=msg,
                parse_mode='html'
            )
        except Exception as error:
            logger.logger.error(f'Something went wrong at help handler with error: {error}')
            await update.effective_message.reply_text ("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
    
    async def get (self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            logger.logger.info(f"Got get message from user_id: {context._user_id}, with args: {''.join(context.args)}")
            waitingMessage = await update.effective_message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
            
            if len (context.args) != 1:
                raise ValueError
            
            telegraph_urls = getArticleByUrl (self.driver, context.args[0])
            if telegraph_urls is None:
                logger.logger.warning('Telegraph_urls is None, sending Error message.')
                await waitingMessage.edit_text ("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏.")
            else:
                logger.logger.info('Telegraph_urls is not None, sending links.')
                await waitingMessage.edit_text ('\n'.join(telegraph_urls))
        except ValueError as error:
            logger.logger.error(f'Got ValueError at get handler with error: {error}')
            await waitingMessage.edit_text ("–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get [url].")
        except PermissionError as error:
            logger.logger.error(f'Got PermissionError at get handler with error: {error}')
            await waitingMessage.edit_text ("–ù–µ–ª—å–∑—è –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–º –º–µ–Ω—å—à–µ –º–µ—Å—è—Ü–∞.")
        except Exception as error:
            logger.logger.error(f'Something went wrong at get handler with error: {error}')
            await waitingMessage.edit_text ("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
    
    async def report (self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            logger.logger.info(f"Got report message from user_id: {context._user_id}, with args: {''.join(context.args)}")
            if len (context.args) < 0:
                raise ValueError
            with open('data.json', 'r') as file:
                admin_id = json.load(file)['admin_id']
            
            reportMessage = " ".join (context.args)

            await context.bot.sendMessage (
                chat_id=admin_id,
                text=f"–í–∞–º –ø—Ä–∏—à–µ–ª —Ä–µ–ø–æ—Ä—Ç –æ—Ç —é–∑–µ—Ä–∞:\n{reportMessage}"
            )
            logger.logger.info('Sent report to the Admin.')

            await context.bot.sendMessage (
                chat_id=update.effective_chat.id,
                text="–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω."
            )
        except ValueError as error:
            logger.logger.error(f'Got ValueError at report handler with error: {error}')
            await update.effective_message.reply_text ("–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /report [message].")
        except Exception as error:
            logger.logger.error(f'Something went wrong at report handler with error: {error}')
            await update.effective_message.reply_text ("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
    
    async def credentials (self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            logger.logger.info(f"Got credentials message from user_id: {context._user_id}, with args: {''.join(context.args)}")
            msg=(
                "<b>–°—Ç–∞—Ç—å–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ç–µ–º, –∫–æ–º—É –æ–Ω–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç.</b>\n"
                "\n"
                "–°–æ–∑–¥–∞—Ç–µ–ª—å –ë–µ–∑–ª—É–Ω–∏—è - <s>@SenecaMoon</s> <b>–õ–ò–ö–í–ò–î–ò–†–û–í–ê–ù</b>\n"
                "Github –±–æ—Ç–∞ - https://github.com/SenecaLucilium/MoonlessReborn\n"
                "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª - https://t.me/moonlessLib"
            )

            await context.bot.sendMessage (
                chat_id=update.effective_chat.id,
                text=msg,
                parse_mode='html'
            )
        except Exception as error:
            logger.logger.error(f'Somethin went wrong at credentials handler with error: {error}')
            await update.effective_message.reply_text ("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")